// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  fullName String
  email    String   @unique
  password String
  verefied DateTime
  role     UserRole @default(USER)

  providerId String? @unique
  provider   String?

  cart             Cart?
  order            Order[]
  verificationCode VerificationCode?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  ingredients Ingredient[]
  item        ProductItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductItem {
  id Int @id @default(autoincrement())

  price     Float
  size      Int?
  pizzaType Int?

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  CartItem CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  imageUrl    String
  price       Float

  products   Product[]
  cartItem   CartItem[]
  cartItemId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  userId Int?  @unique
  user   User? @relation(fields: [userId], references: [id])

  totalAmount Int @default(0)

  token String @unique

  cartItem CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id     Int   @id @default(autoincrement())
  cartId Int?
  cart   Cart? @relation(fields: [cartId], references: [id])

  prductItem    ProductItem? @relation(fields: [productItemId], references: [id])
  productItemId Int?

  quantity Int

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  token String @unique

  totalAmount Int

  status OrderStatus @default(PENDING)

  paymentId String?

  items Json

  fullName String
  address  String
  phone    String
  email    String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  code String @unique

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

enum OrderStatus {
  PENDING
  CUCCEEDED
  CANCELED
}

enum UserRole {
  USER
  ADMIN
}
